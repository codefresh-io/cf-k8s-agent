version: '1.0'

stages:
- preparation
- build
- security scan
- push
- run

steps:

  main_clone:
    title: Cloning main repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: ${{GIT_CONTEXT}}

  install_dependencies:
    title: 'Installing testing dependencies'
    stage: preparation
    image: node:14.21.1
    commands:
    - yarn install --frozen-lockfile

  lint:
    title: 'lint code'
    stage: preparation
    image: node:14.21.1
    commands:
    - yarn lint

  build_step:
    title: "Building production image"
    stage: build
    type: build
    dockerfile: Dockerfile
    image_name: ${{IMAGE_NAME}}
    disable_push: true
    metadata:
      set:
      - CF_QUALITY: true

  run_arm_build:
    type: codefresh-run
    stage: build
    arguments:
      PIPELINE_ID: ${{ARM_PIPELINE_ID}}
      DETACH: false
      VARIABLE:
        - CF_REPO_OWNER=${{CF_REPO_OWNER}}
        - CF_REPO_NAME=${{CF_REPO_NAME}}
        - CF_REVISION=${{CF_REVISION}}
        - CF_BRANCH=${{CF_BRANCH}}
        - CF_BRANCH_TAG_NORMALIZED=${{CF_BRANCH_TAG_NORMALIZED}}
        - GIT_CONTEXT=${{GIT_CONTEXT}}
        - IMAGE_NAME=${{IMAGE_NAME}}
        - ARM_TAG_POSTFIX="${{ARM_TAG_POSTFIX}}"

  security_scan:
    stage: security scan
    type: parallel
    when:
      steps:
        - name: build_step
          on:
          - success
    success_criteria:
      condition:
        any:
         secScanStep: security_scan_1.result == 'success'
         secScanFail: '"${{IGNORE_SEC_SCAN}}" == "true"'
    steps:
      security_scan_1:
        stage: security scan
        image: aquasec/trivy:latest
        title: "Scanning image for security vulnerablities"
        commands:
          - rm -f ${{SEC_SCAN_REPORT_FILE}}
          - |-
            set -o pipefail
            trivy \
              --quiet \
              ${{IMAGE_NAME}}:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}} > ${{SEC_SCAN_REPORT_FILE}}
            trivy \
              --quiet \
              --skip-update \
              --ignorefile /tmp/.trivy/trivyignore \
              --ignore-unfixed \
              --exit-code 1 \
              --severity ${{SEC_SCAN_SEVERITY_THRESHOLD}} \
              ${{IMAGE_NAME}}:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}}
        metadata:
          set:
            - '${{build_step.imageId}}':
                - SECURITY_CHECK_PASS: true

  upload_sec_scan_report:
    stage: security scan
    image: mesosphere/aws-cli
    fail_fast: false
    when:
      steps:
        - name: security_scan
          on:
          - finished
      branch:
        only: [ master ]
    environment:
      - AWS_ACCESS_KEY_ID=${{SEC_SCAN_AWS_KEY_ID}}
      - AWS_SECRET_ACCESS_KEY=${{SEC_SCAN_AWS_SECRET_KEY}}
    commands:
      - |-
        aws s3 cp \
        ${{SEC_SCAN_REPORT_FILE}} \
        s3://${{SEC_SCAN_S3_BUCKET}}/codefresh/${{CF_REPO_NAME}}/${{CF_REPO_NAME}}:${{PACKAGE_VERSION}}.txt
    on_success:
      annotations:
        set:
          - entity_id: '${{CF_BUILD_ID}}'
            entity_type: build
            annotations:
              - S3_report_reference: "s3://${{SEC_SCAN_S3_BUCKET}}/codefresh/${{CF_REPO_NAME}}/${{CF_REPO_NAME}}:${{PACKAGE_VERSION}}.txt"

  push_to_branch:
    title: 'Pushing image to docker registries'
    stage: push
    type: push
    image_name: ${{IMAGE_NAME}}
    candidate: ${{build_step}}
    tags:
      - ${{CF_BRANCH_TAG_NORMALIZED}}
      - ${{CF_REVISION}}
    scale:
      push_quay_to_branch:
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
      push_dockerhub_to_branch:
        registry: "${{REGISTRY_INTEGRATION_DOCKERHUB}}"
      push_gcr_enterprise_to_branch:
        registry: "${{REGISTRY_INTEGRATION_ENTERPRISE}}"


  push:
    title: 'Pushing image to docker registries'
    stage: push
    type: push
    image_name: ${{IMAGE_NAME}}
    candidate: ${{build_step}}
    tags:
    - ${{CF_BRANCH_TAG_NORMALIZED}}
    - ${{CF_REVISION}}
    - latest
    - stable
    when:
     branch:
      only:
       - master
    scale:
      push_quay:
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
      push_dockerhub:
        registry: "${{REGISTRY_INTEGRATION_DOCKERHUB}}"
      push_gcr_enterprise:
        registry: "${{REGISTRY_INTEGRATION_ENTERPRISE}}"

  create_manifest_list:
    stage: push
    type: "codefresh-inc/multiarch-manifester"
    when:
     branch:
      only:
       - master
    arguments:
      image_name: ${{IMAGE_NAME}}
      tags:
        - ${{CF_BRANCH_TAG_NORMALIZED}}
        - ${{CF_REVISION}}
        - latest
        - stable
      arch_tag_postfixes:
        arm64: "${{ARM_TAG_POSTFIX}}"
      registries:
        - name: 'quay.io'
          username: '${{QUAY_USERNAME}}'
          password: '${{QUAY_PASSWORD}}'
        - name: 'docker.io'
          username: '${{DOCKERHUB_USERNAME}}'
          password: '${{DOCKERHUB_PASSWORD}}'
        - name: 'gcr.io'
          path_prefix: codefresh-enterprise
          username: '${{GCR_USERNAME}}'
          password: '${{GCR_PASSWORD}}'
